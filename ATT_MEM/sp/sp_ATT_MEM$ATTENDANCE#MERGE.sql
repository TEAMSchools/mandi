USE KIPP_NJ
GO

ALTER PROCEDURE sp_ATT_MEM$ATTENDANCE#MERGE AS

BEGIN

  WITH att_update AS (
    SELECT ID
          ,STUDENTID
          ,SCHOOLID
          ,ATT_DATE
          ,ATTENDANCE_CODEID
          ,ATT_CODE
          ,ATT_MODE_CODE
          ,CALENDAR_DAYID
          ,PROGRAMID
          ,TRACK_A
          ,TRACK_B
          ,TRACK_C
          ,TRACK_D
          ,TRACK_E
          ,TRACK_F
          ,INSESSION
          ,COUNT_FOR_ADA
          ,PRESENCE_STATUS_CD
          ,CYCLE_DAY_ID
          ,CYCLE_DAY_ABBREVIATION
          ,TOTAL_MINUTES
          ,COUNT_FOR_ADM        
          ,KIPP_NJ.dbo.fn_DateToSY(att_date) AS academic_year
          ,GETDATE() AS last_updated
    FROM OPENQUERY(PS_TEAM,'
      SELECT att.*
      FROM PS_ATTENDANCE_DAILY att    
      WHERE att.att_date >= TO_DATE(''2016-07-01'',''YYYY-MM-DD'') /* UPDATE ANNUALLY */
    ')
   )

  MERGE KIPP_NJ..ATT_MEM$ATTENDANCE AS TARGET
  USING att_update AS SOURCE
     ON TARGET.ID = SOURCE.ID        
  WHEN MATCHED THEN
   UPDATE
    SET TARGET.studentid = SOURCE.studentid
       ,TARGET.att_date = SOURCE.att_date
       ,TARGET.ATTENDANCE_CODEID = SOURCE.ATTENDANCE_CODEID
       ,TARGET.ATT_CODE = SOURCE.ATT_CODE
       ,TARGET.ATT_MODE_CODE = SOURCE.ATT_MODE_CODE
       ,TARGET.CALENDAR_DAYID = SOURCE.CALENDAR_DAYID
       ,TARGET.PROGRAMID = SOURCE.PROGRAMID
       ,TARGET.TRACK_A = SOURCE.TRACK_A
       ,TARGET.TRACK_B = SOURCE.TRACK_B
       ,TARGET.TRACK_C = SOURCE.TRACK_C
       ,TARGET.TRACK_D = SOURCE.TRACK_D
       ,TARGET.TRACK_E = SOURCE.TRACK_E
       ,TARGET.TRACK_F = SOURCE.TRACK_F
       ,TARGET.INSESSION = SOURCE.INSESSION
       ,TARGET.COUNT_FOR_ADA = SOURCE.COUNT_FOR_ADA
       ,TARGET.PRESENCE_STATUS_CD = SOURCE.PRESENCE_STATUS_CD
       ,TARGET.CYCLE_DAY_ID = SOURCE.CYCLE_DAY_ID
       ,TARGET.CYCLE_DAY_ABBREVIATION = SOURCE.CYCLE_DAY_ABBREVIATION
       ,TARGET.TOTAL_MINUTES = SOURCE.TOTAL_MINUTES
       ,TARGET.COUNT_FOR_ADM = SOURCE.COUNT_FOR_ADM
       ,TARGET.last_updated = SOURCE.last_updated
  WHEN NOT MATCHED THEN
   INSERT
    (ID
    ,STUDENTID
    ,SCHOOLID
    ,ATT_DATE
    ,ATTENDANCE_CODEID
    ,ATT_CODE
    ,ATT_MODE_CODE
    ,CALENDAR_DAYID
    ,PROGRAMID
    ,TRACK_A
    ,TRACK_B
    ,TRACK_C
    ,TRACK_D
    ,TRACK_E
    ,TRACK_F
    ,INSESSION
    ,COUNT_FOR_ADA
    ,PRESENCE_STATUS_CD
    ,CYCLE_DAY_ID
    ,CYCLE_DAY_ABBREVIATION
    ,TOTAL_MINUTES
    ,COUNT_FOR_ADM        
    ,academic_year
    ,last_updated)
   VALUES
    (SOURCE.ID
    ,SOURCE.STUDENTID
    ,SOURCE.SCHOOLID
    ,SOURCE.ATT_DATE
    ,SOURCE.ATTENDANCE_CODEID
    ,SOURCE.ATT_CODE
    ,SOURCE.ATT_MODE_CODE
    ,SOURCE.CALENDAR_DAYID
    ,SOURCE.PROGRAMID
    ,SOURCE.TRACK_A
    ,SOURCE.TRACK_B
    ,SOURCE.TRACK_C
    ,SOURCE.TRACK_D
    ,SOURCE.TRACK_E
    ,SOURCE.TRACK_F
    ,SOURCE.INSESSION
    ,SOURCE.COUNT_FOR_ADA
    ,SOURCE.PRESENCE_STATUS_CD
    ,SOURCE.CYCLE_DAY_ID
    ,SOURCE.CYCLE_DAY_ABBREVIATION
    ,SOURCE.TOTAL_MINUTES
    ,SOURCE.COUNT_FOR_ADM
    ,SOURCE.academic_year
    ,SOURCE.last_updated)
  WHEN NOT MATCHED BY SOURCE AND TARGET.ATT_DATE >= '2016-07-01' THEN /* UPDATE ANNUALLY */
   DELETE
  --OUTPUT $ACTION, deleted.*
  ;

END

GO