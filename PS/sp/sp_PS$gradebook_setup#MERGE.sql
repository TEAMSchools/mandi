USE KIPP_NJ
GO

ALTER PROCEDURE sp_PS$gradebook_setup#MERGE AS

BEGIN

  /* drop temp table if exists */
  IF OBJECT_ID(N'tempdb..#gbsetup') IS NOT NULL
    BEGIN
				    DROP TABLE #gbsetup
    END;

  /* load into temp table */
  SELECT *        
  INTO #gbsetup
  FROM OPENQUERY(PS_TEAM,'
    SELECT FG.ID AS FINALGRADESETUPID
          ,FG.FINALGRADESETUPTYPE        
          --,FG.LOWSCORESTODISCARD
        
          ,FG.SECTIONID AS PSM_SECTIONID
          ,SSM.SECTIONSDCID
        
          ,FG.REPORTINGTERMID AS FG_REPORTINGTERMID
          ,RT.NAME AS REPORTINGTERM_NAME
          ,RT.STARTDATE
          ,RT.ENDDATE          
        
          ,FG.GRADINGFORMULAID        
          ,GFW.GRADINGFORMULAWEIGHTINGTYPE
          ,GFW.WEIGHTING                  
          --,GFW.LOWSCORESTODISCARD          

          ,COALESCE(GFW.ASSIGNMENTCATEGORYID, GFW.REPORTINGTERMID, 0) AS ASSIGNMENTCATEGORYID
          ,CAT.NAME AS CATEGORY_NAME
          ,CAT.ABBREVIATION AS CATEGORY_ABBREVIATION
          ,CAT.DEFAULTSCORETYPE
          ,CAT.INCLUDEINFINALGRADES
    FROM PSM_FinalGradeSetup fg
    JOIN SYNC_SectionMap ssm
      ON fg.sectionid = ssm.sectionid
    JOIN SECTIONS sec
      ON ssm.sectionsdcid = sec.dcid
    JOIN TEACHERS tch
      ON sec.teacher = tch.id
    JOIN PSM_CONTENTGROUP cg
      ON fg.contentgroupid = cg.id    
    JOIN PSM_TEACHER t
      ON cg.ownerid = t.id   
     AND tch.teachernumber = t.TEACHERIDENTIFIER
    JOIN PSM_ReportingTerm rt
      ON fg.reportingtermid = rt.id  
    LEFT OUTER JOIN PSM_GradingFormulaWeighting gfw
      ON fg.gradingformulaid = gfw.parentgradingformulaid
    LEFT OUTER JOIN PSM_AssignmentCategory cat
      ON gfw.ASSIGNMENTCATEGORYID = cat.id    
    WHERE rt.startdate >= TO_DATE(''2016-07-01'',''YYYY-MM-DD'') /* UPDATE ANNUALLY */
  ');

  /* merge into destination table */
  MERGE KIPP_NJ..PS$gradebook_setup#static AS TARGET
  USING #gbsetup AS SOURCE
     ON TARGET.FINALGRADESETUPID = SOURCE.FINALGRADESETUPID
    AND TARGET.ASSIGNMENTCATEGORYID = SOURCE.ASSIGNMENTCATEGORYID
  WHEN MATCHED THEN
   UPDATE
    SET TARGET.FINALGRADESETUPTYPE = SOURCE.FINALGRADESETUPTYPE
       ,TARGET.PSM_SECTIONID = SOURCE.PSM_SECTIONID
       ,TARGET.SECTIONSDCID = SOURCE.SECTIONSDCID
       ,TARGET.FG_REPORTINGTERMID = SOURCE.FG_REPORTINGTERMID
       ,TARGET.REPORTINGTERM_NAME = SOURCE.REPORTINGTERM_NAME
       ,TARGET.STARTDATE = SOURCE.STARTDATE
       ,TARGET.ENDDATE = SOURCE.ENDDATE
       ,TARGET.GRADINGFORMULAID = SOURCE.GRADINGFORMULAID
       ,TARGET.GRADINGFORMULAWEIGHTINGTYPE = SOURCE.GRADINGFORMULAWEIGHTINGTYPE
       ,TARGET.WEIGHTING = SOURCE.WEIGHTING       
       ,TARGET.CATEGORY_NAME = SOURCE.CATEGORY_NAME
       ,TARGET.CATEGORY_ABBREVIATION = SOURCE.CATEGORY_ABBREVIATION
       ,TARGET.DEFAULTSCORETYPE = SOURCE.DEFAULTSCORETYPE
       ,TARGET.INCLUDEINFINALGRADES = SOURCE.INCLUDEINFINALGRADES
  WHEN NOT MATCHED BY TARGET THEN
   INSERT
    (FINALGRADESETUPID
    ,FINALGRADESETUPTYPE
    ,PSM_SECTIONID
    ,SECTIONSDCID
    ,FG_REPORTINGTERMID
    ,REPORTINGTERM_NAME
    ,STARTDATE
    ,ENDDATE
    ,GRADINGFORMULAID
    ,GRADINGFORMULAWEIGHTINGTYPE
    ,WEIGHTING
    ,ASSIGNMENTCATEGORYID
    ,CATEGORY_NAME
    ,CATEGORY_ABBREVIATION
    ,DEFAULTSCORETYPE
    ,INCLUDEINFINALGRADES)
   VALUES
    (SOURCE.FINALGRADESETUPID
    ,SOURCE.FINALGRADESETUPTYPE
    ,SOURCE.PSM_SECTIONID
    ,SOURCE.SECTIONSDCID
    ,SOURCE.FG_REPORTINGTERMID
    ,SOURCE.REPORTINGTERM_NAME
    ,SOURCE.STARTDATE
    ,SOURCE.ENDDATE
    ,SOURCE.GRADINGFORMULAID
    ,SOURCE.GRADINGFORMULAWEIGHTINGTYPE
    ,SOURCE.WEIGHTING
    ,SOURCE.ASSIGNMENTCATEGORYID
    ,SOURCE.CATEGORY_NAME
    ,SOURCE.CATEGORY_ABBREVIATION
    ,SOURCE.DEFAULTSCORETYPE
    ,SOURCE.INCLUDEINFINALGRADES); 

END